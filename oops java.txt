Here is a comprehensive revision guide for **Object-Oriented Programming (OOP)** in Java, formatted for easy understanding:

---

# **Object-Oriented Programming in Java - Revision Notes**

## **1. What is OOP?**
- **OOP** is a programming paradigm based on the concept of "objects," which contain data (fields) and methods.
- Four main principles:
  1. **Encapsulation**
  2. **Inheritance**
  3. **Polymorphism**
  4. **Abstraction**

---

## **2. Key OOP Concepts**

### **2.1 Class**
- Blueprint for creating objects.
- Defines properties (fields) and behaviors (methods).

#### **Syntax**:
```java
class ClassName {
    // Fields (variables)
    int field;

    // Methods
    void methodName() {
        // Method logic
    }
}
```

---

### **2.2 Object**
- An instance of a class.
- Created using the `new` keyword.

#### **Example**:
```java
ClassName obj = new ClassName();
```

---

### **2.3 Encapsulation**
- Wrapping data (fields) and methods in a single unit (class).
- **Achieved using**:
  - Private fields.
  - Public getter and setter methods.

#### **Example**:
```java
class Employee {
    private int id;

    // Getter
    public int getId() {
        return id;
    }

    // Setter
    public void setId(int id) {
        this.id = id;
    }
}
```

---

### **2.4 Inheritance**
- Mechanism where a class acquires properties and behaviors of another class.
- **Syntax**: `class SubClass extends SuperClass { }`

#### **Types of Inheritance in Java**:
1. **Single**: One class inherits another.
2. **Multilevel**: A class inherits a class that itself inherits another.
3. **Hierarchical**: Multiple classes inherit the same superclass.

#### **Example**:
```java
class Animal {
    void eat() {
        System.out.println("This animal eats food.");
    }
}

class Dog extends Animal {
    void bark() {
        System.out.println("This dog barks.");
    }
}
```

---

### **2.5 Polymorphism**
- Ability to take many forms.
- **Types**:
  1. **Compile-time Polymorphism (Method Overloading)**:
      - Same method name, different parameter lists.
  2. **Runtime Polymorphism (Method Overriding)**:
      - Subclass provides specific implementation for a method in the superclass.

#### **Method Overloading** Example:
```java
class Calculator {
    int add(int a, int b) {
        return a + b;
    }

    double add(double a, double b) {
        return a + b;
    }
}
```

#### **Method Overriding** Example:
```java
class Parent {
    void display() {
        System.out.println("Parent class");
    }
}

class Child extends Parent {
    @Override
    void display() {
        System.out.println("Child class");
    }
}
```

---

### **2.6 Abstraction**
- Hiding implementation details while showing only essential features.
- **Achieved using**:
  - **Abstract classes**: Class with at least one abstract method.
  - **Interfaces**: Pure abstraction with only method declarations.

#### **Abstract Class Example**:
```java
abstract class Shape {
    abstract void draw();
}

class Circle extends Shape {
    @Override
    void draw() {
        System.out.println("Drawing Circle");
    }
}
```

#### **Interface Example**:
```java
interface Vehicle {
    void start();
}

class Car implements Vehicle {
    public void start() {
        System.out.println("Car starts");
    }
}
```

---

## **3. Access Modifiers**
- Define access levels for fields, methods, and classes.

| Modifier   | Class | Package | Subclass | World |
|------------|-------|---------|----------|-------|
| **Public** | Yes   | Yes     | Yes      | Yes   |
| **Protected** | Yes | Yes     | Yes      | No    |
| **Default** | Yes  | Yes     | No       | No    |
| **Private** | Yes  | No      | No       | No    |

---

## **4. Key OOP Features in Java**

### **4.1 Constructor**
- Special method to initialize objects.
- Name same as class name; no return type.

#### **Types**:
1. Default Constructor
2. Parameterized Constructor

#### **Example**:
```java
class Person {
    String name;

    // Constructor
    Person(String name) {
        this.name = name;
    }
}
```

---

### **4.2 Static Keyword**
- Belongs to the class, not an instance.
- Used for:
  - Static fields.
  - Static methods.
  - Static blocks.

#### **Example**:
```java
class Counter {
    static int count = 0;

    Counter() {
        count++;
    }
}
```

---

### **4.3 Final Keyword**
- Used to restrict:
  - **Variables**: Cannot be reassigned.
  - **Methods**: Cannot be overridden.
  - **Classes**: Cannot be inherited.

#### **Example**:
```java
final class Animal { }
```

---

### **4.4 this Keyword**
- Refers to the current object.
#### **Example**:
```java
class Person {
    String name;

    Person(String name) {
        this.name = name;
    }
}
```

---

### **4.5 super Keyword**
- Refers to the immediate parent class.
#### **Example**:
```java
class Parent {
    void show() {
        System.out.println("Parent class");
    }
}

class Child extends Parent {
    void show() {
        super.show();
        System.out.println("Child class");
    }
}
```

---

## **5. Important OOP Topics**

### **5.1 Interfaces vs Abstract Classes**

| Feature            | Abstract Class      | Interface            |
|--------------------|---------------------|----------------------|
| **Methods**        | Can have abstract and concrete methods. | Only abstract methods (till Java 7). Java 8+ supports default methods. |
| **Inheritance**    | Single inheritance. | Multiple inheritance. |
| **Usage**          | Partial abstraction. | Full abstraction. |

---

### **5.2 Object Class**
- Parent class of all Java classes.
- Common methods:
  - `toString()`
  - `equals()`
  - `hashCode()`

---

### **5.3 Packages**
- Logical grouping of classes and interfaces.
- **Importing**: `import packageName.ClassName;`
- **Example**: `java.util.Scanner`

---

## **6. Practice Problems**
1. Write a class with encapsulated fields and use getter and setter methods.
2. Create an inheritance hierarchy with at least 2 levels and demonstrate method overriding.
3. Implement an abstract class and create subclasses for specific implementations.
4. Write a Java program demonstrating method overloading and overriding.

---

Let me know if you need further explanations or specific examples! ðŸ˜Š