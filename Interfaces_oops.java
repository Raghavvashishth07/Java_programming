
// "An interface is like a promise, a contract to follow."
// "Interfaces are like promises â€“ they say WHAT to do, not HOW to do it."
interface Annimal {
    void sound();  // "Every animal must have a sound, but I wonâ€™t say HOW!"
}

// "You can have multiple promises (multiple interfaces)."
interface Herbivores {
    // "Right now itâ€™s empty, but it still counts as a promise!"
}

// "Horse is keeping TWO promises â€“ Annimal + Herbivores."
class Horse implements Annimal, Herbivores {

    // "Since I promised Annimal, I MUST define sound() here."
    public void sound() {
        System.out.println("Horse neighs");  // "Actual behavior comes here."
    }
}

public class Interfaces_oops {
    public static void main(String[] args) {

        // "Interface type = Reference, Class type = Object."
        Annimal h = new Horse();

        // "Call the method that was promised in Annimal."
        h.sound();
    }
}





 /*
  * ðŸŒŸ Quotes to Remember Interfaces

"An interface is a contract, not construction."
â†’ It only declares rules, no implementation.

"A class must pay its dues when it signs the interface contract."
â†’ Any class that implements must override the methods.

"Multiple inheritance through interfaces is like having multiple advisors, not multiple parents."
â†’ A class can implement many interfaces.

"Interfaces are â€˜what to doâ€™, classes decide â€˜how to doâ€™."

"Interfaces = 100% abstraction (before Java 8)."
â†’ Only method declarations, no body (until default/static methods were added in Java 8).

âœ¨ Quick Trick to Recall
Think of an interface like a job description:

Job Description (interface): "You must know how to speak."

Candidate (class): Horse â†’ "Yes, I can neigh!"
  */